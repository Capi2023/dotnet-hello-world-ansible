---
- name: Instalar .NET Core 8 y configurar la aplicación de cell shop emiliano garcia cordero
  hosts: 127.0.0.1
  connection: local
  become: yes
  tasks:
    - name: Actualizar el sistema
      apt:
        update_cache: yes
        upgrade: dist

    - name: Instalando las dependencias
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present

    - name: Descargar el paquete de repositorio de Microsoft para Ubuntu 24.04 LTS
      command: wget https://packages.microsoft.com/config/ubuntu/24.04/packages-microsoft-prod.deb -O /tmp/packages-microsoft-prod.deb

    - name: Instalar el paquete de repositorio de Microsoft
      command: dpkg -i /tmp/packages-microsoft-prod.deb

    - name: Actualizar el caché de apt después de agregar el repositorio
      apt:
        update_cache: yes

    - name: Instalar .NET SDK
      apt:
        name: dotnet-sdk-8.0
        state: present

    - name: Crear directorio para la aplicación del cell
      file:
        path: /home/ubuntu/cell
        state: directory

    - name: Crear archivo del proyecto
      copy:
        dest: /home/ubuntu/hotel/cell.csproj
        content: |
          <Project Sdk="Microsoft.NET.Sdk.Web">
            <PropertyGroup>
              <TargetFramework>net8.0</TargetFramework>
            </PropertyGroup>
          </Project>

    - name: Crear archivo de código fuente Program.cs
      copy:
        dest: /home/ubuntu/cell/Program.cs
        content: |
          using System;
          using System.Collections.Generic;
          using Microsoft.AspNetCore.Hosting;
          using Microsoft.Extensions.Hosting;
          using Microsoft.AspNetCore.Builder;
          using Microsoft.Extensions.DependencyInjection;
          
          namespace MobileStoreApp
          {
              public class Program
              {
                  public static void Main(string[] args)
                  {
                      CreateHostBuilder(args).Build().Run();
                  }
          
                  public static IHostBuilder CreateHostBuilder(string[] args) =>
                      Host.CreateDefaultBuilder(args)
                          .ConfigureWebHostDefaults(webBuilder =>
                          {
                              webBuilder.UseStartup<Startup>();
                          });
              }
          
              public class Startup
              {
                  public void ConfigureServices(IServiceCollection services)
                  {
                      services.AddControllers();
                  }
          
                  public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
                  {
                      if (env.IsDevelopment())
                      {
                          app.UseDeveloperExceptionPage();
                      }
                      else
                      {
                          app.UseExceptionHandler("/Home/Error");
                          app.UseHsts();
                      }
                      app.UseHttpsRedirection();
                      app.UseRouting();
                      app.UseAuthorization();
                      app.UseEndpoints(endpoints =>
                      {
                          endpoints.MapControllers();
                      });
                  }
              }
              // Punto numero 1: Uso de campos públicos en la clase Mobile, lo que rompe el encapsulamiento y viola el principio de ocultación de datos
              // Se soluciono al encapsular los campos utilizando propiedades con métodos get y set
              // Clase Mobile mejorada con encapsulamiento
              public class Mobile
              {
                  private string _model;
                  private string _brand;
                  private double _price;
                  private List<string> _features = new List<string>();
                  
                  // Punto numero 1 aplicado aqui
                  // Propiedades con métodos get y set
                  public string Model
                  {
                      get { return _model; }
                      set { _model = value; }
                  }
          
                  public string Brand
                  {
                      get { return _brand; }
                      set { _brand = value; }
                  }
          
                  public double Price
                  {
                      get { return _price; }
                      set { _price = value; }
                  }
          
                  public List<string> Features
                  {
                      get { return _features; }
                      set { _features = value; }
                  }
          
                  public void PrintDetails()
                  {
                      Console.WriteLine($"Model: {Model}, Brand: {Brand}, Price: {Price:C}");
                      Console.WriteLine("Features:");
                      foreach (var feature in Features)
                      {
                          Console.WriteLine($"- {feature}");
                      }
                  }
              }
          
              public class StoreManager
              {
                  public List<Mobile> mobiles = new List<Mobile>();
          
                  public void AddMobile(string model, string brand, double price, List<string> features)
                  {
                      var mobile = new Mobile
                      {
                          Model = model,
                          Brand = brand,
                          Price = price,
                          Features = features
                      };
                      mobiles.Add(mobile);
                      mobile.PrintDetails();
                  }
          
                  public void PrintAllMobiles()
                  {
                      foreach (var mobile in mobiles)
                      {
                          mobile.PrintDetails();
                      }
                  }
          
                  // Método largo y complejo sin modularizar
                  public void ProcessSale(string model, int quantity)
                  {
                      Mobile mobile = null;
                      foreach (var m in mobiles)
                      {
                          if (m.Model == model)
                          {
                              mobile = m;
                              break;
                          }
                      }
                      if (mobile != null)
                      {
                          Console.WriteLine($"Processing sale for {quantity} units of {mobile.Model}");
                          // Código adicional para procesar la venta...
                      }
                      else
                      {
                          Console.WriteLine("Mobile not found");
                      }
                  }
              }
          
              public class InventoryAndBilling
              {
                  private List<Mobile> inventory = new List<Mobile>();
          
                  public void AddToInventory(Mobile mobile)
                  {
                      inventory.Add(mobile);
                  }
          
                  public void GenerateBill(Mobile mobile, int quantity)
                  {
                      double total = mobile.Price * quantity;
                      Console.WriteLine($"Bill: {mobile.Model} x{quantity} = {total:C}");
                  }
              }
          
              public class Promotion
              {
                  public void ApplyDiscount(Mobile mobile)
                  {
                      if (mobile.Brand == "BrandX")
                      {
                          mobile.Price *= 0.9;
                          Console.WriteLine($"Discount applied to {mobile.Model}. New price: {mobile.Price:C}");
                      }
                      else if (mobile.Brand == "BrandY")
                      {
                          mobile.Price *= 0.85;
                          Console.WriteLine($"Discount applied to {mobile.Model}. New price: {mobile.Price:C}");
                      }
                      else
                      {
                          Console.WriteLine("No discount available for this brand.");
                      }
                  }
              }
          }

    - name: Construir la aplicación de hotel
      command: dotnet build /home/ubuntu/cell/cell.csproj
      args:
        chdir: /home/ubuntu/cell

    - name: Ejecutar la aplicación de cell shop
      command: dotnet run --urls "http://*:5000"
      args:
        chdir: /home/ubuntu/cell
